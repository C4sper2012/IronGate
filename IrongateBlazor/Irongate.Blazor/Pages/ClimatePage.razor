@page "/climate"
@using Irongate.Service.Models
@attribute [Authorize]
@inject IClimateService ClimateService

<h1 class="text-center">Climate</h1>

<div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
                <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
                    <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                    <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;"/>
                    <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Show Data Labels" For="dataLabels" />
                </RadzenCard>
               <h2>First Floor</h2>
                <RadzenChart class="m-3">
                    <RadzenLineSeries Smooth="@smooth" Data="@FirstFloor" CategoryProperty="timeStamp" Title="Temp" LineType="LineType.Dashed" ValueProperty="temperature">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@smooth" Data="@FirstFloor" CategoryProperty="timeStamp" Title="Humid" ValueProperty="humidity">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsFullDate" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Temp and Humid" />
                    </RadzenValueAxis>
                </RadzenChart>
                <h2>Ground Floor</h2>
                <RadzenChart class="m-3">
                    <RadzenLineSeries Smooth="@smooth" Data="@GroundFloor" CategoryProperty="timeStamp" Title="Temp" LineType="LineType.Dashed" ValueProperty="temperature">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@smooth" Data="@GroundFloor" CategoryProperty="timeStamp" Title="Humid" ValueProperty="humidity">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsFullDate" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Temp and Humid" />
                    </RadzenValueAxis>
                </RadzenChart>
                <h2>Basement</h2>
                 <RadzenChart class="m-3">
                    <RadzenLineSeries Smooth="@smooth" Data="@Basement" CategoryProperty="timeStamp" Title="Temp" LineType="LineType.Dashed" ValueProperty="temperature">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenLineSeries Smooth="@smooth" Data="@Basement" CategoryProperty="timeStamp" Title="Humid" ValueProperty="humidity">
                        <RadzenMarkers MarkerType="MarkerType.Circle" />
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsFullDate" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Temp and Humid" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>

@code {


    public List<Climate> FirstFloor { get; set; }
    public List<Climate> GroundFloor { get; set; }
    public List<Climate> Basement { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FirstFloor =  await ClimateService.GetClimates(2);
        GroundFloor = await ClimateService.GetClimates(1);
        Basement = await ClimateService.GetClimates(0);
    }

    bool smooth = false;
    bool showDataLabels = false;
    
    enum Floor
    {
        FirstFloor = 2,
        GroundFloor = 1,
        Basement = 0
    }
    
    // class ClimateData
    // {
    //     public int Id { get; set; }
    //
    //     public int EntryID { get; set; }
    //
    //     public DateTime TimeStamp { get; set; }
    //
    //     public Floor Floor { get; set; }
    //
    //     public int Temperature { get; set; }
    //
    //     public int Humidity { get; set; }
    // }

    string FormatAsFullDate(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("yy-MM-dd");
        }

        return string.Empty;
    }

    //List<ClimateData> FirstFloor = new List<ClimateData>() {
        // new ClimateData()
        // {
        //     Id = 1,
        //     Temperature = 20,
        //     Humidity = 50,
        //     TimeStamp = DateTime.Now.AddDays(0),
        //     Floor = Floor.FirstFloor
        // },
        // new ClimateData
        // {
        //     Id = 2,
        //     Temperature = 22,
        //     Humidity = 55,
        //     TimeStamp = DateTime.Now.AddDays(-1),
        //     Floor = Floor.FirstFloor
        // },
        // new ClimateData
        // {
        //     Id = 3,
        //     Temperature = 23,
        //     Humidity = 45,
        //     TimeStamp = DateTime.Now.AddDays(-2),
        //     Floor = Floor.FirstFloor
        // },
        // new ClimateData
        // {
        //     Id = 4,
        //     Temperature = 24,
        //     Humidity = 50,
        //     TimeStamp = DateTime.Now.AddDays(-3),
        //     Floor = Floor.FirstFloor
        // },
        // new ClimateData
        // {
        //     Id = 5,
        //     Temperature = 26,
        //     Humidity = 40,
        //     TimeStamp = DateTime.Now.AddDays(-4),
        //     Floor = Floor.FirstFloor
        // },
        // new ClimateData
        // {
        //     Id = 6,
        //     Temperature = 18,
        //     Humidity = 80,
        //     TimeStamp = DateTime.Now.AddDays(-5),
        //     Floor = Floor.FirstFloor
        // },
        // new ClimateData
        // {
        //     Id = 7,
        //     Temperature = 17,
        //     Humidity = 70,
        //     TimeStamp = DateTime.Now.AddDays(-6),
        //     Floor = Floor.FirstFloor
        // }
    //};
    
    //List<ClimateData> GroundFloor = new List<ClimateData>() {
        // new ClimateData()
        // {
        //     Id = 8,
        //     Temperature = 20,
        //     Humidity = 50,
        //     TimeStamp = DateTime.Now.AddDays(0),
        //     Floor = Floor.GroundFloor
        // },
        // new ClimateData
        // {
        //     Id = 9,
        //     Temperature = 22,
        //     Humidity = 55,
        //     TimeStamp = DateTime.Now.AddDays(-1),
        //     Floor = Floor.GroundFloor
        // },
        // new ClimateData
        // {
        //     Id = 10,
        //     Temperature = 23,
        //     Humidity = 45,
        //     TimeStamp = DateTime.Now.AddDays(-2),
        //     Floor = Floor.GroundFloor
        // },
        // new ClimateData
        // {
        //     Id = 11,
        //     Temperature = 24,
        //     Humidity = 50,
        //     TimeStamp = DateTime.Now.AddDays(-3),
        //     Floor = Floor.GroundFloor
        // },
        // new ClimateData
        // {
        //     Id = 12,
        //     Temperature = 26,
        //     Humidity = 40,
        //     TimeStamp = DateTime.Now.AddDays(-4),
        //     Floor = Floor.GroundFloor
        // },
        // new ClimateData
        // {
        //     Id = 13,
        //     Temperature = 18,
        //     Humidity = 80,
        //     TimeStamp = DateTime.Now.AddDays(-5),
        //     Floor = Floor.GroundFloor
        // },
        // new ClimateData
        // {
        //     Id = 14,
        //     Temperature = 17,
        //     Humidity = 70,
        //     TimeStamp = DateTime.Now.AddDays(-6),
        //     Floor = Floor.GroundFloor
        // }
    //};
    
    //List<ClimateData> Basement = new List<ClimateData>() {
        // new ClimateData()
        // {
        //     Id = 15,
        //     Temperature = 20,
        //     Humidity = 50,
        //     TimeStamp = DateTime.Now.AddDays(0),
        //     Floor = Floor.Basement
        // },
        // new ClimateData
        // {
        //     Id = 16,
        //     Temperature = 22,
        //     Humidity = 55,
        //     TimeStamp = DateTime.Now.AddDays(-1),
        //     Floor = Floor.Basement
        // },
        // new ClimateData
        // {
        //     Id = 17,
        //     Temperature = 23,
        //     Humidity = 45,
        //     TimeStamp = DateTime.Now.AddDays(-2),
        //     Floor = Floor.Basement
        // },
        // new ClimateData
        // {
        //     Id = 18,
        //     Temperature = 24,
        //     Humidity = 50,
        //     TimeStamp = DateTime.Now.AddDays(-3),
        //     Floor = Floor.Basement
        // },
        // new ClimateData
        // {
        //     Id = 19,
        //     Temperature = 26,
        //     Humidity = 40,
        //     TimeStamp = DateTime.Now.AddDays(-4),
        //     Floor = Floor.Basement
        // },
        // new ClimateData
        // {
        //     Id = 20,
        //     Temperature = 18,
        //     Humidity = 80,
        //     TimeStamp = DateTime.Now.AddDays(-5),
        //     Floor = Floor.Basement
        // },
        // new ClimateData
        // {
        //     Id = 21,
        //     Temperature = 17,
        //     Humidity = 70,
        //     TimeStamp = DateTime.Now.AddDays(-6),
        //     Floor = Floor.Basement
        // }
    //};

}