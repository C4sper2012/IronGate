@page "/climate"
@using Irongate.Service.Models
@attribute [Authorize(Roles = "IronGate-Read")]
@inject IClimateService ClimateService

<h1 class="text-center">Climate</h1>
<RadzenDatePicker ShowTime="false" HourFormat="24" DateFormat="MM/dd/yyyy h:mm tt" Change="@(async () => await UpdateCharts())" @bind-Value="@Date"/>
<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;"/>
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels"/>
            </RadzenCard>
            <h2>First Floor</h2>
            <RadzenChart class="m-3">
                <RadzenLineSeries Smooth="@smooth" Data="@FirstFloor" CategoryProperty="timeStamp" Title="Temp" LineType="LineType.Dashed" ValueProperty="temperature">
                    <RadzenMarkers MarkerType="MarkerType.Square"/>
                    <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="@smooth" Data="@FirstFloor" CategoryProperty="timeStamp" Title="Humid" ValueProperty="humidity">
                    <RadzenMarkers MarkerType="MarkerType.Circle"/>
                    <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" Formatter="@FormatAsFullDate"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true"/>
                    <RadzenAxisTitle Text="Temp and Humid"/>
                </RadzenValueAxis>
            </RadzenChart>
            <h2>Ground Floor</h2>
            <RadzenChart class="m-3">
                <RadzenLineSeries Smooth="@smooth" Data="@GroundFloor" CategoryProperty="timeStamp" Title="Temp" LineType="LineType.Dashed" ValueProperty="temperature">
                    <RadzenMarkers MarkerType="MarkerType.Square"/>
                    <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="@smooth" Data="@GroundFloor" CategoryProperty="timeStamp" Title="Humid" ValueProperty="humidity">
                    <RadzenMarkers MarkerType="MarkerType.Circle"/>
                    <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" Formatter="@FormatAsFullDate"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true"/>
                    <RadzenAxisTitle Text="Temp and Humid"/>
                </RadzenValueAxis>
            </RadzenChart>
            <h2>Basement</h2>
            <RadzenChart class="m-3">
                <RadzenLineSeries Smooth="@smooth" Data="@Basement" CategoryProperty="timeStamp" Title="Temp" LineType="LineType.Dashed" ValueProperty="temperature">
                    <RadzenMarkers MarkerType="MarkerType.Square"/>
                    <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="@smooth" Data="@Basement" CategoryProperty="timeStamp" Title="Humid" ValueProperty="humidity">
                    <RadzenMarkers MarkerType="MarkerType.Circle"/>
                    <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" Formatter="@FormatAsFullDate"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true"/>
                    <RadzenAxisTitle Text="Temp and Humid"/>
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>

@code {


    public List<Climate> FirstFloor { get; set; }
    public List<Climate> GroundFloor { get; set; }
    public List<Climate> Basement { get; set; }
    public DateTime? Date { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateCharts();
    }

    async Task UpdateCharts()
    {
        if (Date.HasValue)
        {
            FirstFloor = await ClimateService.GetClimates(Date.Value, 2);
            GroundFloor = await ClimateService.GetClimates(Date.Value, 1);
            Basement = await ClimateService.GetClimates(Date.Value, 0);
        }
    }

    bool smooth = false;
    bool showDataLabels = false;


    string FormatAsFullDate(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("yy-MM-dd");
        }

        return string.Empty;
    }

}