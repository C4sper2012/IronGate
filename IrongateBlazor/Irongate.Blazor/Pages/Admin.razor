@page "/Admin"
@using Irongate.Service.Models
@using Microsoft.AspNetCore.Authentication
@attribute [Authorize(Roles = "IronGate-Admin")]
@inject ILogService LogService
@inject IHttpContextAccessor httpContextAccessor

<h3>Admin</h3>
<RadzenDataGrid Data="@Logs" TItem="Log" AllowSorting="true" AllowMultiColumnSorting="true" AllowPaging="true" PageSize="5" AllowFiltering="true" FilterMode="FilterMode.Advanced" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Log" Property="ID" Title="ID"/>
        <RadzenDataGridColumn TItem="Log" Property="Message" Title="Message"/>
        <RadzenDataGridColumn TItem="Log" Property="TimeStamp" Title="Timestamp"/>
    </Columns>
</RadzenDataGrid>
<RadzenButton class="mt-3" ButtonStyle="ButtonStyle.Danger" Clicked="@Clicked" Shade="Shade.Darker">Delete all data!</RadzenButton>
<RadzenButton class="mt-3"  ButtonStyle="ButtonStyle.Success" Clicked="@GetNewData" Shade="Shade.Darker">Get new data</RadzenButton>


@code {

    public IEnumerable<Log> Logs { get; set; }
    public string AccessToken { get; set; }
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        AccessToken = await httpContextAccessor.HttpContext.GetTokenAsync("access_token");
        await LogService.CreateAsync(new Log()
        {
            Message = "A user accessed the admin panel",
            TimeStamp = DateTime.Now
        });
        
        Logs = await LogService.GetLogs() ;
    }
    
    async Task Clicked()
    {
        await LogService.DeleteAsync();
        await LogService.CreateAsync(new Log()
        {
            Message = "A user cleared all data",
            TimeStamp = DateTime.Now
        });
        StateHasChanged();
    }
    
    async Task GetNewData()
    {
        await LogService.CreateAsync(new Log()
        {
            Message = "New data fetched",
            TimeStamp = DateTime.Now
        });
        StateHasChanged();
    }
}
